{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\VSCode\\\\FrontEnd\\\\a_p_do_file\\\\frontend\\\\src\\\\FileUpload\\\\UploadedFilesList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./UploadedFileList.css\";\nimport { List, ListItem, ListItemText, Typography, Box, styled, CircularProgress, Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListItemStyled = styled(ListItem)(({\n  theme\n}) => ({\n  backgroundColor: theme.palette.background.paper,\n  padding: theme.spacing(1),\n  borderRadius: theme.spacing(1),\n  marginBottom: theme.spacing(1)\n}));\n_c = ListItemStyled;\nconst FileHashTypography = styled(Typography)(({\n  theme\n}) => ({\n  fontWeight: \"bold\"\n}));\n_c2 = FileHashTypography;\nconst UploadedFilesList = ({\n  uploadedFiles\n}) => {\n  _s();\n  const [downloadProgress, setDownloadProgress] = useState({});\n  //   console.log(uploadedFiles.fileHash, uploadedFiles.fileSize, uploadedFiles.fileExtension, uploadedFiles.fileSize);\n  const handleDownload = async (fileName, fileHash, fileSize, fileExtension) => {\n    try {\n      setDownloadProgress(prevState => ({\n        ...prevState,\n        [fileHash]: 0\n      }));\n      //   console.log(fileExtension);\n      const response = await fetch(`http://localhost:8000/api/retrieve/${fileHash}?fileSize=${fileSize}&fileExtension=${fileExtension}&fileName=${fileName}`, {\n        method: \"GET\",\n        responseType: \"blob\",\n        onProgress: event => {\n          if (event.lengthComputable) {\n            const progress = Math.round(event.loaded / event.total * 100);\n            setDownloadProgress(prevState => ({\n              ...prevState,\n              [fileHash]: progress\n            }));\n          }\n        }\n      });\n      if (response.ok) {\n        const blob = await response.blob();\n        const downloadUrl = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = downloadUrl;\n        link.download = `${fileName}`;\n        const progressBar = document.createElement(\"div\");\n        progressBar.className = \"progress-bar\";\n        const progressValue = document.createElement(\"div\");\n        progressValue.className = \"progress-value\";\n        progressBar.appendChild(progressValue);\n\n        // Set up progress event handlers\n        response.body.on(\"downloadprogress\", event => {\n          const progress = Math.round(event.loaded / event.total * 100);\n          progressValue.style.width = `${progress}%`;\n        });\n\n        // Append the progress bar to the document\n        document.body.appendChild(progressBar);\n\n        // Initiate the download\n        document.body.appendChild(link);\n        link.click();\n\n        // Clean up\n        document.body.removeChild(link);\n        document.body.removeChild(progressBar);\n      } else {\n        console.error(\"Error downloading file\");\n      }\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n    } finally {\n      setDownloadProgress(prevState => ({\n        ...prevState,\n        [fileHash]: 0\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 2,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Uploaded Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: uploadedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(ListItemStyled, {\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(FileHashTypography, {\n              children: [\"File Name: \", file.fileName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this), \"File Size: \", (file.fileSize / (1024 * 1024)).toFixed(2), \" MB\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this),\n          secondary: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => handleDownload(file.fileName, file.fileHash, file.fileSize, file.fileExtension),\n              children: \"Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this), downloadProgress[file.fileHash] > 0 && /*#__PURE__*/_jsxDEV(CircularProgress, {\n              variant: \"determinate\",\n              value: downloadProgress[file.fileHash],\n              size: 24,\n              style: {\n                marginLeft: \"8px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadedFilesList, \"0Amleaz5kakMfJrWiPbmPZRz2gY=\");\n_c3 = UploadedFilesList;\nexport default UploadedFilesList;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ListItemStyled\");\n$RefreshReg$(_c2, \"FileHashTypography\");\n$RefreshReg$(_c3, \"UploadedFilesList\");","map":{"version":3,"names":["React","useState","List","ListItem","ListItemText","Typography","Box","styled","CircularProgress","Button","jsxDEV","_jsxDEV","ListItemStyled","theme","backgroundColor","palette","background","paper","padding","spacing","borderRadius","marginBottom","_c","FileHashTypography","fontWeight","_c2","UploadedFilesList","uploadedFiles","_s","downloadProgress","setDownloadProgress","handleDownload","fileName","fileHash","fileSize","fileExtension","prevState","response","fetch","method","responseType","onProgress","event","lengthComputable","progress","Math","round","loaded","total","ok","blob","downloadUrl","window","URL","createObjectURL","link","document","createElement","href","download","progressBar","className","progressValue","appendChild","body","on","style","width","click","removeChild","console","error","mt","children","variant","gutterBottom","_jsxFileName","lineNumber","columnNumber","map","file","index","primary","Fragment","toFixed","secondary","color","onClick","value","size","marginLeft","_c3","$RefreshReg$"],"sources":["D:/Code/VSCode/FrontEnd/a_p_do_file/frontend/src/FileUpload/UploadedFilesList.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./UploadedFileList.css\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  Box,\r\n  styled,\r\n  CircularProgress,\r\n  Button,\r\n} from \"@mui/material\";\r\n\r\nconst ListItemStyled = styled(ListItem)(({ theme }) => ({\r\n  backgroundColor: theme.palette.background.paper,\r\n  padding: theme.spacing(1),\r\n  borderRadius: theme.spacing(1),\r\n  marginBottom: theme.spacing(1),\r\n}));\r\n\r\nconst FileHashTypography = styled(Typography)(({ theme }) => ({\r\n  fontWeight: \"bold\",\r\n}));\r\n\r\nconst UploadedFilesList = ({ uploadedFiles }) => {\r\n  const [downloadProgress, setDownloadProgress] = useState({});\r\n  //   console.log(uploadedFiles.fileHash, uploadedFiles.fileSize, uploadedFiles.fileExtension, uploadedFiles.fileSize);\r\n  const handleDownload = async (\r\n    fileName,\r\n    fileHash,\r\n    fileSize,\r\n    fileExtension\r\n  ) => {\r\n    try {\r\n      setDownloadProgress((prevState) => ({\r\n        ...prevState,\r\n        [fileHash]: 0,\r\n      }));\r\n      //   console.log(fileExtension);\r\n      const response = await fetch(\r\n        `http://localhost:8000/api/retrieve/${fileHash}?fileSize=${fileSize}&fileExtension=${fileExtension}&fileName=${fileName}`,\r\n        {\r\n          method: \"GET\",\r\n          responseType: \"blob\",\r\n          onProgress: (event) => {\r\n            if (event.lengthComputable) {\r\n              const progress = Math.round((event.loaded / event.total) * 100);\r\n              setDownloadProgress((prevState) => ({\r\n                ...prevState,\r\n                [fileHash]: progress,\r\n              }));\r\n            }\r\n          },\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const blob = await response.blob();\r\n        const downloadUrl = window.URL.createObjectURL(blob);\r\n        const link = document.createElement(\"a\");\r\n        link.href = downloadUrl;\r\n        link.download = `${fileName}`;\r\n        const progressBar = document.createElement(\"div\");\r\n        progressBar.className = \"progress-bar\";\r\n        const progressValue = document.createElement(\"div\");\r\n        progressValue.className = \"progress-value\";\r\n        progressBar.appendChild(progressValue);\r\n\r\n        // Set up progress event handlers\r\n        response.body.on(\"downloadprogress\", (event) => {\r\n          const progress = Math.round((event.loaded / event.total) * 100);\r\n          progressValue.style.width = `${progress}%`;\r\n        });\r\n\r\n        // Append the progress bar to the document\r\n        document.body.appendChild(progressBar);\r\n\r\n        // Initiate the download\r\n        document.body.appendChild(link);\r\n        link.click();\r\n\r\n        // Clean up\r\n        document.body.removeChild(link);\r\n        document.body.removeChild(progressBar);\r\n      } else {\r\n        console.error(\"Error downloading file\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error downloading file:\", error);\r\n    } finally {\r\n      setDownloadProgress((prevState) => ({\r\n        ...prevState,\r\n        [fileHash]: 0,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box mt={2}>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Uploaded Files\r\n      </Typography>\r\n      <List>\r\n        {uploadedFiles.map((file, index) => (\r\n          <ListItemStyled key={index}>\r\n            <ListItemText\r\n              primary={\r\n                <React.Fragment>\r\n                  <FileHashTypography>\r\n                    File Name: {file.fileName}\r\n                  </FileHashTypography>\r\n                  <br />\r\n                  File Size: {(file.fileSize / (1024 * 1024)).toFixed(2)} MB\r\n                </React.Fragment>\r\n              }\r\n              secondary={\r\n                <React.Fragment>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() =>\r\n                      handleDownload(\r\n                        file.fileName,\r\n                        file.fileHash,\r\n                        file.fileSize,\r\n                        file.fileExtension\r\n                      )\r\n                    }\r\n                  >\r\n                    Download\r\n                  </Button>\r\n                  {downloadProgress[file.fileHash] > 0 && (\r\n                    <CircularProgress\r\n                      variant=\"determinate\"\r\n                      value={downloadProgress[file.fileHash]}\r\n                      size={24}\r\n                      style={{ marginLeft: \"8px\" }}\r\n                    />\r\n                  )}\r\n                </React.Fragment>\r\n              }\r\n            />\r\n          </ListItemStyled>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UploadedFilesList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}