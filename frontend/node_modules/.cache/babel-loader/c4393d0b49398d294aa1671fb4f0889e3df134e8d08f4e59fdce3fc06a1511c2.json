{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\VSCode\\\\FrontEnd\\\\a_p_do_file\\\\frontend\\\\src\\\\FileUpload\\\\FileUpload.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, ProgressBar } from 'react-bootstrap';\nimport UploadedFilesList from './UploadedFilesList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleFileUpload = () => {\n    if (!file) return;\n\n    // Simulating file upload progress\n    const uploadInterval = setInterval(() => {\n      setUploadProgress(prevProgress => {\n        const newProgress = prevProgress + 10;\n        if (newProgress >= 100) {\n          clearInterval(uploadInterval);\n          return 100;\n        }\n        return newProgress;\n      });\n    }, 200);\n\n    // Simulating file upload completion\n    setTimeout(() => {\n      // Here, you would typically send the file to the server for upload\n      console.log('File uploaded:', file);\n      setFile(null);\n      setUploadProgress(0);\n    }, 2000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formFileUpload\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Upload a file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploading \", file.name, \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        now: uploadProgress,\n        label: `${uploadProgress}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFileUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(UploadedFilesList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"RpOFqOEOJqVkWYW5UQI7ytlh3VI=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","Form","ProgressBar","UploadedFilesList","jsxDEV","_jsxDEV","FileUpload","_s","file","setFile","uploadProgress","setUploadProgress","handleFileChange","event","target","files","handleFileUpload","uploadInterval","setInterval","prevProgress","newProgress","clearInterval","setTimeout","console","log","children","Group","controlId","Label","fileName","_jsxFileName","lineNumber","columnNumber","Control","type","onChange","name","now","label","onClick","_c","$RefreshReg$"],"sources":["D:/Code/VSCode/FrontEnd/a_p_do_file/frontend/src/FileUpload/FileUpload.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Form, ProgressBar } from 'react-bootstrap';\r\nimport UploadedFilesList from './UploadedFilesList';\r\n\r\nconst FileUpload = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleFileUpload = () => {\r\n    if (!file) return;\r\n\r\n    // Simulating file upload progress\r\n    const uploadInterval = setInterval(() => {\r\n      setUploadProgress((prevProgress) => {\r\n        const newProgress = prevProgress + 10;\r\n        if (newProgress >= 100) {\r\n          clearInterval(uploadInterval);\r\n          return 100;\r\n        }\r\n        return newProgress;\r\n      });\r\n    }, 200);\r\n\r\n    // Simulating file upload completion\r\n    setTimeout(() => {\r\n      // Here, you would typically send the file to the server for upload\r\n      console.log('File uploaded:', file);\r\n      setFile(null);\r\n      setUploadProgress(0);\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form.Group controlId=\"formFileUpload\">\r\n        <Form.Label>Upload a file</Form.Label>\r\n        <Form.Control type=\"file\" onChange={handleFileChange} />\r\n      </Form.Group>\r\n      {file && (\r\n        <div>\r\n          <p>Uploading {file.name}...</p>\r\n          <ProgressBar now={uploadProgress} label={`${uploadProgress}%`} />\r\n          <button onClick={handleFileUpload}>Upload</button>\r\n        </div>\r\n      )}\r\n      <UploadedFilesList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}